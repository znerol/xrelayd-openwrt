diff -Nur host-20000331/file.c host-20000331-uclinux-1/file.c
--- host-20000331/file.c	2000-03-29 22:10:27.000000000 +0200
+++ host-20000331-uclinux-1/file.c	2007-12-17 21:41:43.000000000 +0100
@@ -274,8 +274,7 @@
 /*
  * Write the length of the answer buffer.
  */
-	/* len = htons((u_short)bufsize); */
-	putshort((u_short)bufsize, (u_char *)&len);
+	len = htons((u_short)bufsize);
 
 	buffer = (char *)&len;
 	buflen = INT16SZ;
@@ -371,8 +370,7 @@
 /*
  * Terminate if length is zero.
  */
-	/* len = ntohs(len); */
-	len = _getshort((u_char *)&len);
+	len = ntohs(len);
 	if (len == 0)
 		return(0);
 
diff -Nur host-20000331/info.c host-20000331-uclinux-1/info.c
--- host-20000331/info.c	2000-03-27 12:59:11.000000000 +0200
+++ host-20000331-uclinux-1/info.c	2007-12-17 21:57:50.000000000 +0100
@@ -89,7 +89,9 @@
  * Check for aliases of single name.
  * Note that the alias is supposed to be fully qualified.
  */
-	if (dot == 0 && (cp = (char *)hostalias(name)) != NULL)
+#if 0
+	static char abuf[MAXDNAME];
+	if (dot == 0 && (cp = (char *)res_hostalias(&_res, name, abuf, sizeof(abuf))) != NULL)
 	{
 		if (verbose)
 			printf("Aliased %s to %s\n", name, cp);
@@ -97,6 +99,7 @@
 		result = get_domaininfo(cp, (char *)NULL);
 		return(result);
 	}
+#endif
 
 /*
  * Trailing dot means absolute (fully qualified) address.
@@ -310,21 +313,11 @@
  */
 	seterrno(0);	/* reset before querying nameserver */
 
-	n = res_mkquery(QUERY, name, class, type, (qbuf_t *)NULL, 0,
-			(rrec_t *)NULL, (qbuf_t *)&query, sizeof(querybuf));
-	if (n < 0)
-	{
-		if (debug)
-			printf("%sres_mkquery failed\n", dbprefix);
-		seth_errno(NO_RECOVERY);
-		return(-1);
-	}
-
-	n = res_send((qbuf_t *)&query, n, (qbuf_t *)answerbuf, sizeof(querybuf));
+	n = res_search(name, class, type, (qbuf_t *)answerbuf, sizeof(querybuf));
 	if (n < 0)
 	{
 		if (debug)
-			printf("%sres_send failed\n", dbprefix);
+			printf("%sres_search failed\n", dbprefix);
 		seth_errno(TRY_AGAIN);
 		return(-1);
 	}
@@ -652,17 +645,13 @@
 	if (check_size(rname, T_NONE, cp, msg, eom, n) < 0)
 		return(NULL);
 
-	type = _getshort(cp);
-	cp += INT16SZ;
+	GETSHORT(type,cp);
 
-	class = _getshort(cp);
-	cp += INT16SZ;
+	GETSHORT(class,cp);
 
-	ttl = _getlong(cp);
-	cp += INT32SZ;
+	GETLONG(ttl,cp);
 
-	dlen = _getshort(cp);
-	cp += INT16SZ;
+	GETSHORT(dlen,cp);
 
 	if (check_size(rname, type, cp, msg, eom, dlen) < 0)
 		return(NULL);
@@ -761,9 +750,8 @@
 				n = *cp++;
 				doprintf((" ; proto = %s", dtoa(n)))
 
-				n = _getshort(cp);
+				GETSHORT(n,cp);
 				doprintf((", port = %s", dtoa(n)))
-				cp += INT16SZ;
 				break;
 			}
 #endif
@@ -777,9 +765,8 @@
 	    case T_MX:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		n = expand_name(rname, type, cp, msg, eom, dname);
 		if (n < 0)
@@ -830,30 +817,25 @@
 			break;
 		doprintf((" ("))
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", utoa(n)))
 		doprintf(("\t;serial (version)"))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", dtoa(n)))
 		doprintf(("\t;refresh period (%s)", pr_time(n, FALSE)))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", dtoa(n)))
 		doprintf(("\t;retry interval (%s)", pr_time(n, FALSE)))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", dtoa(n)))
 		doprintf(("\t;expire time (%s)", pr_time(n, FALSE)))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", dtoa(n)))
 		doprintf(("\t;default ttl (%s)", pr_time(n, FALSE)))
-		cp += INT32SZ;
 
 		doprintf(("\n\t\t\t)"))
 		break;
@@ -960,9 +942,8 @@
 	    case T_GID:
 		if (dlen == INT32SZ)
 		{
-			n = _getlong(cp);
+			GETLONG(n,cp);
 			doprintf(("\t%s", dtoa(n)))
-			cp += INT32SZ;
 		}
 		break;
 
@@ -988,9 +969,8 @@
 	    case T_RT:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		n = expand_name(rname, type, cp, msg, eom, dname);
 		if (n < 0)
@@ -1002,9 +982,8 @@
 	    case T_AFSDB:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		n = expand_name(rname, type, cp, msg, eom, dname);
 		if (n < 0)
@@ -1054,9 +1033,8 @@
 	    case T_PX:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		n = expand_name(rname, type, cp, msg, eom, dname);
 		if (n < 0)
@@ -1103,20 +1081,16 @@
 		n = INT32SZ + 3*INT32SZ;
 		if (check_size(rname, type, cp, msg, eor, n) < 0)
 			break;
-		c = _getlong(cp);
-		cp += INT32SZ;
+		GETLONG(c,cp);
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\t%s ", pr_spherical(n, "N", "S")))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf((" %s ", pr_spherical(n, "E", "W")))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf((" %sm ", pr_vertical(n, "", "-")))
-		cp += INT32SZ;
 
 		doprintf((" %sm", pr_precision((c >> 16) & 0xff)))
 		doprintf((" %sm", pr_precision((c >>  8) & 0xff)))
@@ -1139,12 +1113,11 @@
 	    case T_SIG:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		if (n >= T_FIRST && n <= T_LAST)
 			doprintf(("\t%s", pr_type(n)))
 		else
 			doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, 1) < 0)
 			break;
@@ -1161,25 +1134,21 @@
 			break;
 		doprintf((" ("))
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", dtoa(n)))
 		doprintf(("\t\t;original ttl"))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", pr_date(n)))
 		doprintf(("\t;signature expiration"))
-		cp += INT32SZ;
 
-		n = _getlong(cp);
+		GETLONG(n,cp);
 		doprintf(("\n\t\t\t%s", pr_date(n)))
 		doprintf(("\t;signature inception"))
-		cp += INT32SZ;
 
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\n\t\t\t%s", dtoa(n)))
 		doprintf(("\t\t;key tag"))
-		cp += INT16SZ;
 
 		n = expand_name(rname, type, cp, msg, eom, dname);
 		if (n < 0)
@@ -1209,9 +1178,8 @@
 	    case T_KEY:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t0x%s", xtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, 1) < 0)
 			break;
@@ -1271,21 +1239,18 @@
 	    case T_SRV:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf((" %s", dtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf((" %s", dtoa(n)))
-		cp += INT16SZ;
 
 		n = expand_name(rname, type, cp, msg, eom, dname);
 		if (n < 0)
@@ -1297,15 +1262,13 @@
 	    case T_NAPTR:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf((" %s", dtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, 1) < 0)
 			break;
@@ -1335,9 +1298,8 @@
 	    case T_KX:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		n = expand_name(rname, type, cp, msg, eom, dname);
 		if (n < 0)
@@ -1349,15 +1311,13 @@
 	    case T_CERT:
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf(("\t%s", dtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, INT16SZ) < 0)
 			break;
-		n = _getshort(cp);
+		GETSHORT(n,cp);
 		doprintf((" %s", dtoa(n)))
-		cp += INT16SZ;
 
 		if (check_size(rname, type, cp, msg, eor, 1) < 0)
 			break;
@@ -1709,11 +1669,9 @@
 	if (check_size(rname, T_NONE, cp, msg, eom, n) < 0)
 		return(NULL);
 
-	type = _getshort(cp);
-	cp += INT16SZ;
+	GETSHORT(type,cp);
 
-	class = _getshort(cp);
-	cp += INT16SZ;
+	GETSHORT(class,cp);
 
 #ifdef lint
 	if (verbose)
diff -Nur host-20000331/ipkg/host/CONTROL/control host-20000331-uclinux-1/ipkg/host/CONTROL/control
--- host-20000331/ipkg/host/CONTROL/control	1970-01-01 01:00:00.000000000 +0100
+++ host-20000331-uclinux-1/ipkg/host/CONTROL/control	2007-12-17 21:15:14.000000000 +0100
@@ -0,0 +1,4 @@
+Maintainer: OpenWrt Developers Team <openwrt-devel@openwrt.org>
+Source: http://svn.openwrt.org/openwrt/trunk/openwrt/package/host
+Version: 20000331-9
+Architecture: mipsel
Binary files host-20000331/ipkg/host/usr/bin/host and host-20000331-uclinux-1/ipkg/host/usr/bin/host differ
Binary files host-20000331/ipkg-install/usr/bin/host and host-20000331-uclinux-1/ipkg-install/usr/bin/host differ
diff -Nur host-20000331/list.c host-20000331-uclinux-1/list.c
--- host-20000331/list.c	2000-03-29 23:51:03.000000000 +0200
+++ host-20000331-uclinux-1/list.c	2007-12-17 22:03:04.000000000 +0100
@@ -914,17 +914,13 @@
 		if (check_size(rname, T_NONE, cp, msg, eom, n) < 0)
 			return(FALSE);
 
-		type = _getshort(cp);
-		cp += INT16SZ;
+		GETSHORT(type,cp);
 
-		class = _getshort(cp);
-		cp += INT16SZ;
+		GETSHORT(class,cp);
 
-		ttl = _getlong(cp);
-		cp += INT32SZ;
+		GETLONG(ttl,cp);
 
-		dlen = _getshort(cp);
-		cp += INT16SZ;
+		GETSHORT(dlen,cp);
 
 		if (check_size(rname, type, cp, msg, eom, dlen) < 0)
 			return(FALSE);
@@ -1530,6 +1526,8 @@
 	zonecount = 0;			/* count of delegated zones */
 	hostcount = 0;			/* count of host names */
 
+#if 0
+
 /*
  * When loading the zone from the local cache, the cache file must exist.
  */
@@ -1561,12 +1559,13 @@
 		seth_errno(NO_RECOVERY);
 		return(FALSE);
 	}
-
+#if 0
 	if (debug)
 	{
 		printf("%sget_zone()\n", dbprefix);
 		pr_query((qbuf_t *)&query, n, stdout);
 	}
+#endif
 
 	/* setup destination address */
 	bzero((char *)&sin, sizeof(sin));
@@ -1636,12 +1635,13 @@
 			seth_errno(TRY_AGAIN);
 			return(FALSE);
 		}
-
+#if 0
 		if (debug > 1)
 		{
 			printf("%sgot answer, %d bytes:\n", dbprefix, n);
 			pr_query((qbuf_t *)&answer, querysize(n), stdout);
 		}
+#endif
 
 	/*
 	 * Analyze the contents of the answer and check for errors.
@@ -1820,6 +1820,9 @@
 	}
 
 	return(TRUE);
+#else
+	return(FALSE);
+#endif
 }
 
 /*
@@ -2217,17 +2220,13 @@
 		if (check_size(rname, T_NONE, cp, msg, eom, n) < 0)
 			return(FALSE);
 
-		type = _getshort(cp);
-		cp += INT16SZ;
+		GETSHORT(type,cp);
 
-		class = _getshort(cp);
-		cp += INT16SZ;
+		GETSHORT(class,cp);
 
-		ttl = _getlong(cp);
-		cp += INT32SZ;
+		GETLONG(ttl,cp);
 
-		dlen = _getshort(cp);
-		cp += INT16SZ;
+		GETSHORT(dlen,cp);
 
 		if (check_size(rname, type, cp, msg, eom, dlen) < 0)
 			return(FALSE);
@@ -2252,16 +2251,11 @@
 			n = 5*INT32SZ;
 			if (check_size(rname, type, cp, msg, eor, n) < 0)
 				return(FALSE);
-			soa.serial = _getlong(cp);
-			cp += INT32SZ;
-			soa.refresh = _getlong(cp);
-			cp += INT32SZ;
-			soa.retry = _getlong(cp);
-			cp += INT32SZ;
-			soa.expire = _getlong(cp);
-			cp += INT32SZ;
-			soa.defttl = _getlong(cp);
-			cp += INT32SZ;
+			GETLONG(soa.serial,cp);
+			GETLONG(soa.refresh,cp);
+			GETLONG(soa.retry,cp);
+			GETLONG(soa.expire,cp);
+			GETLONG(soa.defttl,cp);
 
 			/* valid complete soa record found */
 			soaname = strcpy(soanamebuf, rname);
diff -Nur host-20000331/misc.c host-20000331-uclinux-1/misc.c
--- host-20000331/misc.c	2000-03-29 20:20:05.000000000 +0200
+++ host-20000331-uclinux-1/misc.c	2007-12-17 21:37:54.000000000 +0100
@@ -276,8 +276,7 @@
 
 	for (p = buf, i = 0; i < IPNGSIZE/2; i++)
 	{
-		n = _getshort(cp);
-		cp += INT16SZ;
+		GETSHORT(n,cp);
 
 		(void) sprintf(p, ":%X", n);
 		p += strlength(p);
diff -Nur host-20000331/send.c host-20000331-uclinux-1/send.c
--- host-20000331/send.c	2000-01-31 13:25:06.000000000 +0100
+++ host-20000331-uclinux-1/send.c	2007-12-17 21:53:14.000000000 +0100
@@ -680,8 +680,8 @@
 /*
  * Write the length of the query buffer.
  */
-	/* len = htons((u_short)bufsize); */
-	putshort((u_short)bufsize, (u_char *)&len);
+	len = htons((u_short)bufsize);
+	/* putshort((u_short)bufsize, (u_char *)&len); */
 
 	if (send(sock, (char *)&len, INT16SZ, 0) != INT16SZ)
 	{
@@ -763,8 +763,8 @@
 /*
  * Terminate if length is zero.
  */
-	/* len = ntohs(len); */
-	len = _getshort((u_char *)&len);
+	len = ntohs(len);
+	/* len = _getshort((u_char *)&len); */
 	if (len == 0)
 		return(0);
 
